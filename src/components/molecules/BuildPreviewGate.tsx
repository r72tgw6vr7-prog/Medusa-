import React, { useState, useRef, useEffect } from 'react';
import { Play, Server, Check, Trash2, AlertCircle, ExternalLink } from 'lucide-react';

// ============================================
// COMPONENT: BuildPreviewGate
// ============================================
// PURPOSE: Produce a clean production build, serve a preview, and emit a pass/fail gate report.
// [file:ba687238]

interface CommandOutput {
  command: string;
  output: string[];
  timestamp: Date;
  exitCode?: number;
  status: 'pending' | 'running' | 'success' | 'error';
}

interface ChecklistItem {
  id: string;
  label: string;
  checked: boolean;
}

export const BuildPreviewGate: React.FC = () => {
  const [outputs, setOutputs] = useState<CommandOutput[]>([]);
  const [currentCommand, setCurrentCommand] = useState<string | null>(null);
  const [viteUrls, setViteUrls] = useState<{ local: string; network?: string } | null>(null);
  const [checklist, setChecklist] = useState<ChecklistItem[]>([
    { id: 'home-renders', label: 'Home page renders correctly', checked: false },
    { id: 'no-console-errors', label: 'No console errors in browser', checked: false },
    { id: 'no-404s', label: 'No 404s for team images', checked: false },
  ]);
  const logRef = useRef<HTMLDivElement>(null);

  // Auto-scroll log to bottom
  useEffect(() => {
    if (logRef.current) {
      logRef.current.scrollTop = logRef.current.scrollHeight;
    }
  }, [outputs]);

  // Extract Vite URLs from output
  const extractViteUrls = (outputLines: string[]) => {
    const urlPattern = /Local:\s+(http:\/\/[^\s]+)/;
    const networkPattern = /Network:\s+(http:\/\/[^\s]+)/;

    for (const line of outputLines) {
      const localMatch = line.match(urlPattern);
      const networkMatch = line.match(networkPattern);

      if (localMatch) {
        setViteUrls((prev) => ({ ...prev, local: localMatch[1] }));
      }
      if (networkMatch) {
        setViteUrls((prev) => ({ ...prev!, network: networkMatch[1] }));
      }
    }
  };

  // Simulate command execution (in real implementation, this would call a backend API)
  const executeCommand = async (cmd: string, label: string) => {
    setCurrentCommand(label);

    const commandOutput: CommandOutput = {
      command: cmd,
      output: [],
      timestamp: new Date(),
      status: 'running',
    };

    setOutputs((prev) => [...prev, commandOutput]);

    // Simulate command execution
    // In a real implementation, this would make an API call to execute the command
    // and stream back the output
    await new Promise((resolve) => setTimeout(resolve, 2000));

    // Mock success output
    const mockOutput = [`$ ${cmd}`, 'Running command...', 'Command completed successfully'];

    // Special handling for different commands
    if (cmd.includes('preview')) {
      mockOutput.push('');
      mockOutput.push('  ➜  Local:   http://localhost:4173/');
      mockOutput.push('  ➜  Network: http://192.168.1.100:4173/');
      mockOutput.push('  ➜  press h + enter to show help');
      extractViteUrls(mockOutput);
    }

    setOutputs((prev) =>
      prev.map((out, idx) =>
        idx === prev.length - 1
          ? { ...out, output: mockOutput, status: 'success', exitCode: 0 }
          : out,
      ),
    );

    setCurrentCommand(null);
  };

  const handleClearCache = () => {
    executeCommand('rm -rf node_modules/.vite', 'Clear Vite Cache');
  };

  const handleStartDev = () => {
    executeCommand('npm run dev', 'Start Dev Server');
  };

  const handleBuild = () => {
    executeCommand('npm run build', 'Build Production');
  };

  const handleStartPreview = () => {
    executeCommand('npm run preview', 'Start Preview Server');
  };

  const handleChecklistToggle = (id: string) => {
    setChecklist((prev) =>
      prev.map((item) => (item.id === id ? { ...item, checked: !item.checked } : item)),
    );
  };

  const generateReport = () => {
    const allPassed = checklist.every((item) => item.checked);
    const timestamp = new Date().toISOString();

    const report = `# BUILD PREVIEW REPORT
Generated: ${timestamp}

## Summary
**Status:** ${allPassed ? '✅ PASS' : '❌ FAIL'}

## Commands Executed
${outputs
  .map(
    (out, idx) => `
### ${idx + 1}. ${out.command}
- **Timestamp:** ${out.timestamp.toISOString()}
- **Status:** ${out.status}
- **Exit Code:** ${out.exitCode ?? 'N/A'}
`,
  )
  .join('\n')}

## Preview URLs
${
  viteUrls
    ? `
- **Local:** ${viteUrls.local}
${viteUrls.network ? `- **Network:** ${viteUrls.network}` : ''}
`
    : '_No preview URLs detected_'
}

## Verification Checklist
${checklist.map((item) => `- [${item.checked ? 'x' : ' '}] ${item.label}`).join('\n')}

## Recommendation
${
  allPassed
    ? '✅ **READY TO DEPLOY** - All checks passed. Preview is green.'
    : '❌ **DO NOT DEPLOY** - Some checks failed. Please review and fix issues before deploying.'
}

---
*Report generated by BuildPreviewGate component*
`;

    // Download report
    const blob = new Blob([report], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'BUILD_PREVIEW_REPORT.md';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const allChecked = checklist.every((item) => item.checked);

  return (
    <div className='w-full max-w-2xl mx-auto p-8 bg-[#1A1A1A] text-white rounded-md'>
      <div className='flex flex-col gap-0'>
        {/* Header */}
        <section>
          <h1 className='text-2xl font-bold mb-0'>Build Preview Gate</h1>
          <p className='text-[#C0C0C0] text-sm'>
            Run commands, verify the preview, and generate a deployment gate report.
          </p>
        </section>

        {/* Command Buttons */}
        <section className='mt-8'>
          <h2 className='text-lg font-semibold mb-0'>Commands</h2>
          <div className='flex flex-col gap-0'>
            <button
              onClick={handleClearCache}
              disabled={currentCommand !== null}
              className='flex items-center gap-0 px-8 py-0 bg-red-600 hover:bg-red-700 disabled:bg-gray-600 disabled:cursor-not-allowed rounded transition-colors duration-200'
            >
              <Trash2 size={16} />
              <span>Clear Vite Cache</span>
            </button>

            <button
              onClick={handleStartDev}
              disabled={currentCommand !== null}
              className='flex items-center gap-0 px-8 py-0 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-600 disabled:cursor-not-allowed rounded transition-colors duration-200'
            >
              <Play size={16} />
              <span>Start Dev Server</span>
            </button>

            <button
              onClick={handleBuild}
              disabled={currentCommand !== null}
              className='flex items-center gap-0 px-8 py-0 bg-green-600 hover:bg-green-700 disabled:bg-gray-600 disabled:cursor-not-allowed rounded transition-colors duration-200'
            >
              <Server size={16} />
              <span>Build Production</span>
            </button>

            <button
              onClick={handleStartPreview}
              disabled={currentCommand !== null}
              className='flex items-center gap-0 px-8 py-0 bg-purple-600 hover:bg-purple-700 disabled:bg-gray-600 disabled:cursor-not-allowed rounded transition-colors duration-200'
            >
              <ExternalLink size={16} />
              <span>Start Preview Server</span>
            </button>
          </div>

          {currentCommand && (
            <div
              className='mt-0 text-sm text-[#D4AF37] flex items-center gap-0'
              role='status'
              aria-live='polite'
            >
              <div className='animate-spin rounded-full h-4 w-4 border-2 border-yellow-400 border-t-transparent'></div>
              <span>Running: {currentCommand}...</span>
            </div>
          )}
        </section>

        {/* Command Output Log */}
        <section className='mt-8'>
          <h2 className='text-lg font-semibold mb-0'>Output Log</h2>
          <div
            ref={logRef}
            className='bg-black/50 rounded border border-[#C0C0C0]/20 p-8 h-64 overflow-y-auto font-mono text-xs'
          >
            {outputs.length === 0 ? (
              <p className='text-gray-500'>No commands executed yet...</p>
            ) : (
              outputs.map((out, idx) => (
                <div key={idx} className='mb-8'>
                  <div className='flex items-center gap-0 mb-0'>
                    <span
                      className={`
                      px-2 py-0.5 rounded text-xs
                      ${out.status === 'success' ? 'bg-green-600' : ''}
                      ${out.status === 'error' ? 'bg-red-600' : ''}
                      ${out.status === 'running' ? 'bg-yellow-600' : ''}
                      ${out.status === 'pending' ? 'bg-gray-600' : ''}
                    `}
                    >
                      {out.status.toUpperCase()}
                    </span>
                    <span className='text-[#C0C0C0]'>{out.timestamp.toLocaleTimeString()}</span>
                  </div>
                  {out.output.map((line, lineIdx) => (
                    <div key={lineIdx} className='text-[#C0C0C0]'>
                      {line}
                    </div>
                  ))}
                </div>
              ))
            )}
          </div>
        </section>

        {/* Preview URLs */}
        {viteUrls && (
          <section className='mt-8 p-8 bg-green-900/20 border border-green-700 rounded'>
            <h2 className='text-lg font-semibold mb-0 flex items-center gap-0'>
              <Server size={18} />
              Preview URLs
            </h2>
            <div className='flex flex-col gap-0'>
              <div>
                <span className='text-[#C0C0C0]'>Local:</span>
                <a
                  href={viteUrls.local}
                  target='_blank'
                  rel='noopener noreferrer'
                  className='ml-0 text-blue-400 hover:text-blue-300 underline transition-colors duration-200'
                >
                  {viteUrls.local}
                </a>
              </div>
              {viteUrls.network && (
                <div>
                  <span className='text-[#C0C0C0]'>Network:</span>
                  <a
                    href={viteUrls.network}
                    target='_blank'
                    rel='noopener noreferrer'
                    className='ml-0 text-blue-400 hover:text-blue-300 underline transition-colors duration-200'
                  >
                    {viteUrls.network}
                  </a>
                </div>
              )}
            </div>
          </section>
        )}

        {/* Verification Checklist */}
        <section className='mt-8'>
          <h2 className='text-lg font-semibold mb-0'>Verification Checklist</h2>
          <div className='flex flex-col gap-0 p-8 bg-[#0F0F0F] rounded'>
            {checklist.map((item) => (
              <label
                key={item.id}
                className='flex items-center gap-0 cursor-pointer hover:bg-gray-700/50 p-0 rounded transition-colors duration-200'
              >
                <input
                  type='checkbox'
                  checked={item.checked}
                  onChange={() => handleChecklistToggle(item.id)}
                  className='w-5 h-5 rounded border-gray-600 text-green-600 focus:ring-2 focus:ring-green-500'
                />
                <span className={item.checked ? 'line-through text-gray-500' : ''}>
                  {item.label}
                </span>
                {item.checked && <Check size={16} className='text-green-500 ml-auto' />}
              </label>
            ))}
          </div>
        </section>

        {/* Gate Status */}
        <section className='mt-8'>
          <div
            className={`p-4 rounded border-2 transition-colors duration-200 ${
              allChecked ? 'bg-green-900/20 border-green-600' : 'bg-red-900/20 border-red-600'
            }`}
            role='status'
            aria-live='polite'
          >
            <div className='flex items-center gap-0'>
              {allChecked ? (
                <>
                  <Check size={24} className='text-green-500' />
                  <div>
                    <h3 className='font-bold text-green-400'>✅ READY TO DEPLOY</h3>
                    <p className='text-sm text-[#C0C0C0]'>All checks passed. Preview is green.</p>
                  </div>
                </>
              ) : (
                <>
                  <AlertCircle size={24} className='text-red-500' />
                  <div>
                    <h3 className='font-bold text-red-400'>❌ DO NOT DEPLOY</h3>
                    <p className='text-sm text-[#C0C0C0]'>Complete all checks before deploying.</p>
                  </div>
                </>
              )}
            </div>
          </div>
        </section>

        {/* Generate Report Button */}
        <section className='mt-8'>
          <button
            onClick={generateReport}
            disabled={outputs.length === 0}
            className='w-full px-8 py-0 bg-[#D4AF37] hover:bg-[#C49D2B] disabled:bg-gray-600 disabled:cursor-not-allowed text-black font-semibold rounded transition-colors duration-200'
          >
            Generate BUILD_PREVIEW_REPORT.md
          </button>
        </section>
      </div>
    </div>
  );
};

export default BuildPreviewGate;
